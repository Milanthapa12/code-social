generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id
  name String?
  username String @unique
  email String? @unique
  password String?
  googleId String? @unique
  avatar String?
  bio String?
  sessions Session[]
  posts Post[]
  followings Follow[] @relation("Following")
  followers Follow[] @relation("Follower")
  comments Comment[]
  likes Like[]
  bookmarks Bookmark[]
  receivedNotification Notification[] @relation("Recipent")
  issuedNotification Notification[] @relation("Issuer")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

model Follow {
  followerId String
  follower User @relation("Following",fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following User @relation("Follower", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Session {
  id String @id
  userId String
  expiresAt DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}


model Post {
  id String @id @default(cuid())
  content String @db.LongText
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments Media[]
  comments Comment[]
  likes Like[]
  bookmarks Bookmark[]
  linkedNotification Notification[]
  createdAt DateTime @default(now())

  @@map("posts")
}

model Media {
  id String @id @default(cuid())
  postId String? 
  post Post? @relation(fields: [postId], references: [id], onDelete: SetNull)
  type MediaType
  url String
  createdAt DateTime @default(now())

  @@map("post_medias")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment{
  id String @id @default(cuid())
  content String
  userId String
  postId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("comments")
}


model Like{
  userId String
  postId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark{
  id String @id @default(cuid())
  userId String
  postId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Notification {
  id String @id @default(cuid())
  recipentId String
  recipent User @relation("Recipent", fields: [recipentId], references: [id], onDelete: Cascade)
  issuerId String
  issuer User @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId String?
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  type NotificationType
  read Boolean @default(false)
  createdAt DateTime @default(now())

  // @@unique([recipentId, issuerId,type])
  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
